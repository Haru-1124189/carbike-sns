import { Camera, Download, Upload } from 'lucide-react';
import React, { useCallback, useEffect, useRef, useState } from 'react';

interface ThumbnailGeneratorProps {
  videoFile: File | null;
  onThumbnailSelect: (thumbnailUrl: string) => void;
  selectedThumbnail: string | null;
}

export const ThumbnailGenerator: React.FC<ThumbnailGeneratorProps> = ({
  videoFile,
  onThumbnailSelect,
  selectedThumbnail
}) => {
  // YouTube準拠: 1280x720, 16:9, 2MB以下推奨
  const TARGET_WIDTH = 1280;
  const TARGET_HEIGHT = 720;
  const TARGET_RATIO = TARGET_WIDTH / TARGET_HEIGHT; // 16:9
  const RATIO_TOLERANCE = 0.02; // ±2%
  const [thumbnails, setThumbnails] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [customThumbnail, setCustomThumbnail] = useState<string | null>(null);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const generateThumbnails = useCallback(async () => {
    if (!videoFile || !videoRef.current) return;

    setIsGenerating(true);
    const video = videoRef.current;
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const thumbnails: string[] = [];
    const timePoints = [0, 0.25, 0.5, 0.75]; // 動画の25%, 50%, 75%の位置

    try {
      for (let i = 0; i < timePoints.length; i++) {
        const time = video.duration * timePoints[i];
        video.currentTime = time;

        await new Promise<void>((resolve) => {
        video.onseeked = () => {
          // 16:9かつ1280x720にリサイズ（"cover"で切り抜き）
          const srcW = video.videoWidth;
          const srcH = video.videoHeight;
          const srcRatio = srcW / srcH;

          canvas.width = TARGET_WIDTH;
          canvas.height = TARGET_HEIGHT;

          let drawW: number, drawH: number, dx: number, dy: number;
          if (srcRatio > TARGET_RATIO) {
            // 横長 → 高さ基準に合わせて左右トリミング
            drawH = TARGET_HEIGHT;
            drawW = Math.round(TARGET_HEIGHT * srcRatio);
            dx = Math.round((TARGET_WIDTH - drawW) / 2);
            dy = 0;
          } else {
            // 縦長 → 幅基準に合わせて上下トリミング
            drawW = TARGET_WIDTH;
            drawH = Math.round(TARGET_WIDTH / srcRatio);
            dx = 0;
            dy = Math.round((TARGET_HEIGHT - drawH) / 2);
          }

          ctx.clearRect(0, 0, TARGET_WIDTH, TARGET_HEIGHT);
          ctx.drawImage(video, dx, dy, drawW, drawH);

          const thumbnailUrl = canvas.toDataURL('image/jpeg', 0.85);
            thumbnails.push(thumbnailUrl);
            resolve();
          };
        });
      }

      setThumbnails(thumbnails);
    } catch (error) {
      console.error('サムネイル生成エラー:', error);
    } finally {
      setIsGenerating(false);
    }
  }, [videoFile]);

  // 動画選択時に自動で生成（最初の一回）
  useEffect(() => {
    if (videoFile && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      generateThumbnails();
    }
  }, [videoFile, hasAutoGenerated, generateThumbnails]);

  const handleCustomThumbnailUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !file.type.startsWith('image/')) return;

    const img = new Image();
    img.onload = () => {
      const srcW = img.width;
      const srcH = img.height;
      const srcRatio = srcW / srcH;
      const withinRatio = Math.abs(srcRatio - TARGET_RATIO) <= RATIO_TOLERANCE;

      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      canvas.width = TARGET_WIDTH;
      canvas.height = TARGET_HEIGHT;

      // coverで中央トリミングしつつ1280x720へ
      let drawW: number, drawH: number, dx: number, dy: number;
      if (srcRatio > TARGET_RATIO) {
        drawH = TARGET_HEIGHT;
        drawW = Math.round(TARGET_HEIGHT * srcRatio);
        dx = Math.round((TARGET_WIDTH - drawW) / 2);
        dy = 0;
      } else {
        drawW = TARGET_WIDTH;
        drawH = Math.round(TARGET_WIDTH / srcRatio);
        dx = 0;
        dy = Math.round((TARGET_HEIGHT - drawH) / 2);
      }
      ctx.clearRect(0, 0, TARGET_WIDTH, TARGET_HEIGHT);
      ctx.drawImage(img, dx, dy, drawW, drawH);

      const result = canvas.toDataURL('image/jpeg', 0.9);
      setCustomThumbnail(result);
      onThumbnailSelect(result);
    };
    img.src = URL.createObjectURL(file);
  };

  const handleThumbnailClick = (thumbnailUrl: string) => {
    onThumbnailSelect(thumbnailUrl);
  };

  // 動画が選択されていない場合でもサムネイル生成エリアを表示
  // if (!videoFile) {
  //   return null;
  // }

  return (
    <div className="space-y-4">
      <div className="flex items-center">
        <h3 className="text-sm font-medium text-white">サムネイル <span className="text-red-400 text-xs align-top">*</span></h3>
      </div>

      <div className="mt-2 flex items-center gap-2">
        <button
          onClick={generateThumbnails}
          disabled={isGenerating || !videoFile}
          className="flex items-center space-x-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors disabled:opacity-50"
        >
          <Camera size={16} />
          <span>{isGenerating ? '生成中...' : '自動生成'}</span>
        </button>
        <button
          onClick={() => fileInputRef.current?.click()}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-600 rounded-lg hover:bg-surface-light transition-colors"
        >
          <Upload size={16} />
          <span>画像をアップロード</span>
        </button>
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleCustomThumbnailUpload}
          className="hidden"
        />
      </div>

      <p className="mt-2 text-xs text-gray-400">推奨サイズ: 1280×720（16:9）, JPG/PNG, 2MB以下。推奨サイズ以外の画像は中央トリミングして1280×720に自動調整されます。</p>

      {/* 隠しビデオ要素 */}
      <video
        ref={videoRef}
        src={videoFile ? URL.createObjectURL(videoFile) : ''}
        className="hidden"
        preload="metadata"
      />
      <canvas ref={canvasRef} className="hidden" />

      {/* アップロードで選択された画像の簡易プレビュー */}
      {customThumbnail && (
        <div className="mt-2 flex items-center gap-2">
          <img
            src={customThumbnail}
            alt="アップロードされたサムネイル"
            className="w-16 h-16 object-cover rounded-lg border border-gray-600"
          />
          <span className="text-xs text-gray-400">アップロード画像を使用中</span>
        </div>
      )}

      {/* 自動生成されたサムネイル */}
      {thumbnails.length > 0 && (
        <div className="space-y-2">
          <label className="block text-sm font-medium text-white">自動生成されたサムネイル</label>
          <div className="grid grid-cols-2 gap-4">
            {thumbnails.map((thumbnail, index) => (
              <div
                key={index}
                onClick={() => handleThumbnailClick(thumbnail)}
                className={`relative cursor-pointer rounded-lg overflow-hidden border-2 transition-colors ${
                  selectedThumbnail === thumbnail ? 'border-primary' : 'border-gray-600'
                }`}
              >
                <img
                  src={thumbnail}
                  alt={`サムネイル ${index + 1}`}
                  className="w-full h-24 object-cover"
                />
                {selectedThumbnail === thumbnail && (
                  <div className="absolute top-2 right-2 w-6 h-6 bg-primary rounded-full flex items-center justify-center">
                    <Download size={12} className="text-white" />
                  </div>
                )}
                <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 p-1">
                  <p className="text-xs text-white text-center">
                    {Math.round((index / (thumbnails.length - 1)) * 100)}%
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* 選択されたサムネイルのプレビュー */}
      {selectedThumbnail && (
        <div className="space-y-2">
          <label className="block text-sm font-medium text-white">選択されたサムネイル</label>
          <div className="relative">
            <img
              src={selectedThumbnail}
              alt="選択されたサムネイル"
              className="w-full max-w-md h-48 object-cover rounded-lg border border-gray-600"
            />
          </div>
        </div>
      )}
    </div>
  );
};
